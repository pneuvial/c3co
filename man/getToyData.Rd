% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getToyData.R
\name{getToyData}
\alias{getToyData}
\title{Create a toy subclone and mixture data set}
\usage{
getToyData(n, len, nbClones, nbSegs, eps, weightSparsity = 0.1,
  dimension = 1L, intercept = TRUE, returnLocus = TRUE)
}
\arguments{
\item{n}{The number of observations.}

\item{len}{The number of loci in each subclone.}

\item{nbClones}{The number of subclones.}

\item{nbSegs}{The total number of segments.}

\item{eps}{A numeric value, the signal to noise ratio for simulated data.}

\item{weightSparsity}{A numeric value in \eqn{[0,1]}: weights under
\code{weightSparsity} are set to 0. This parameter controls the sparsity of
the weight matrix.}

\item{dimension}{An integer value in {1,2}, the dimension of the signals to
be generated (e.g. 1 for total copy numbers and 2 for minor and major copy
numbers)}

\item{intercept}{A logical value indicating whether an intercept should be
added (this corresponds to the presence of a normal subclone).}

\item{returnLocus}{A logical value indicating whether the locus-level data
should be returned. Defaults to TRUE}
}
\value{
\item{W}{A \code{n}-by-\code{nbClones} matrix of weights}
\item{segment}{A list of two elements:
\describe{
\item{Y}{An \code{n}-by-\code{nbSegs} matrix of observed CN signals if \code{dimension==1}, or a list of two such matrices if \code{dimension==2}}
\item{Z}{An \code{nbClones}-by-\code{nbSegs} matrix of latent features
(subclones)} if \code{dimension==1}, or a list of two such matrices if \code{dimension==2}}
}
\item{locus}{only returned if \code{returnLocus} is TRUE: A list of two elements:
\describe{
\item{Y}{An \code{n}-by-\code{len} matrix of observed CN signals, if \code{dimension==1}, or a list of two such matrices if \code{dimension==2}}
\item{Z}{An \code{nbClones}-by-\code{len} matrix of latent features
(subclones)}, if \code{dimension==1}, or a list of two such matrices if \code{dimension==2}}
}
}
\description{
Create a toy subclone and mixture data set
}
\details{
For simplicity, the breakpoints positions are drawn uniformly from
the set of all possible positions.
}
\examples{

len <- 100L
nbClones <- 3L
nbSegs <- 6L
n <- 10L

dat <- getToyData(n, len, nbClones, nbSegs, eps = 0)  ## noiseless
matplot(t(dat$locus$Y), t = "s")
matplot(t(dat$segment$Y), t = "s")

dat <- getToyData(n, len, nbClones, nbSegs, eps = 0.2)  ## noisy
matplot(t(dat$locus$Y), t="s")
matplot(t(dat$segment$Y), t="s")


\dontrun{
l1 <- seq(from = 1e-6, to = 1e-4, length.out = 10L)
parameters.grid <- list(lambda = l1, nb.arch = 2:6)
Y <- dat$segment$Y
fit <- fitC3co(Y, parameters.grid=parameters.grid)
pvePlot2(fit$config$best)
}
}
