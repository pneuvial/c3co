% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/positiveFusedLasso.R
\name{positive.fused}
\alias{positive.fused}
\title{Positive fused lasso function}
\usage{
positive.fused(Y1, Y2, nb.arch, lambda1, lambda2, init.random = FALSE,
  eps = 0.01, max.iter = 50, verbose = F, new.getZ = FALSE)
}
\arguments{
\item{Y1}{A matrix containing the segmented minor copy number (\code{n} patients in row and \code{L} segments in columns)}

\item{Y2}{A matrix containing the segmented major copy number (\code{n} patients in row and \code{L} segments in columns)}

\item{nb.arch}{An integer which is the number of archetypes in the model}

\item{lambda1}{A real number which is the penalty coefficient for the fused lasso on the minor copy number dimension}

\item{lambda2}{A real number which is the penalty coefficient for the fused lasso on the major copy number dimension}

\item{init.random}{if you want to use random initialization set paramater to TRUE}

\item{eps}{criterion to stop algorithm (when W do not change sqrt(sum((W-W.old)^2)<eps)}

\item{max.iter}{maximum number of iterations of the algorithm}

\item{verbose}{if you want to print some information during running}

\item{new.getZ}{TRUE if you want to parallelize inferrence of Minor and Major copy numbers}
}
\value{
An object of class [\code{\linkS4class{posFused}}]
}
\description{
Positive fused lasso function
}
\examples{
dataAnnotTP <- acnr::loadCnRegionData(dataSet="GSE11976", tumorFrac=1)
dataAnnotN <- acnr::loadCnRegionData(dataSet="GSE11976", tumorFrac=0)
len <- 500*10
nbClones <- 3
bkps <- list(c(100,250)*10, c(150,400)*10,c(150,400)*10)
regions <-list(c("(0,3)", "(0,1)","(1,2)"), 
c("(1,1)", "(0,1)","(1,1)"), c("(0,2)", "(0,1)","(1,1)"))
datSubClone <- buildSubclones(len, dataAnnotTP, dataAnnotN, nbClones, bkps, regions)
M = matrix(c(40,30, 0,0,70, 15,10, 0, 35,15,0,0 ,0,0,0), byrow=TRUE, ncol=3)
simu <- mixSubclones(subClones=datSubClone,M)
YTCNtoSeg <- t(sapply(simu, function(cc) cc$tcn))
YDHtoSeg <- t(sapply(simu, function(cc) cc$dh))
sim <- t(rbind(YTCNtoSeg,YDHtoSeg))
res <- jointseg::jointSeg(sim, method = "RBS", K=8)
bkp <- res$bestBkp
Y1 <- t(sapply(simu, function(cc) cc$c1))
Y2 <-  t(sapply(simu, function(cc) cc$c2))
Y1seg <- t(apply(Y1, 1, matrixStats::binMeans, x=1:ncol(Y1),bx= c(1,bkp,ncol(Y1)), na.rm=TRUE))
Y2seg <- t(apply(Y2, 1, matrixStats::binMeans, x=1:ncol(Y1),bx= c(1,bkp,ncol(Y1)), na.rm=TRUE))
lambda <- 0.001
system.time(rC1C2 <- positive.fused(Y1seg,Y2seg, 4,lambda1 = lambda, lambda2 = lambda))
system.time(rC1C2new <- positive.fused(Y1seg,Y2seg, 4,
lambda1 = lambda, lambda2 = lambda, new.getZ=TRUE))
rTCN <- positive.fused(Y1seg+Y2seg,NULL, 2,lambda1 = lambda, lambda2 = lambda)
showPosFused(rTCN)
}
